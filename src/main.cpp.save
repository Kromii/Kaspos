#include "statecheck.h"
#include "dataloop.h"
#include "globals.h"
#include "mqtt.h"
#include "senddata.h"
#include "wapice.h"
#include <IOT_API.h>

using namespace libconfig;

int main(int argc, char* argv[])
{

//testing mode or usemode

int opt = 0;

while ((opt = getopt(argc, argv, "t")) != -1){
	switch (opt){
	case 't':
		testmode = 1;
		std::cout << "Test mode enabled" << std::endl;
		break;
	default:
		break;
	}
}

//setup start
Config cfg;
try {
	cfg.readFile("config.cfg");
}

catch(const FileIOException &fioex){
	std::cerr << "I/O error while reading file." << std::endl;
	return(EXIT_FAILURE);
}

catch(const ParseException &pex){
	std::cerr << "Parse error at " << pex.getFile() << ":" << pex.getLine() << " - " << pex.getError() << std::endl;
	return(EXIT_FAILURE);
}

// Count the amount of sensors from config.cfg

const Setting& root = cfg.getRoot();

const Setting& sensors = root["sensors"];

AoS = sensors.getLength();				//AoS = Amount of sensors


//create data arrays for use from config.ini

//timeArray -setup start
//create timerArray (interval, lastChecked
//std::vector< std::vector <long long int> > timerArray;

for (int i = 0; i < AoS; i++){
	std::vector <long long int> timeRow;
	for (int j = 0; j < 2; j++){
		timeRow.push_back(i * j);
	}
	timerArray.push_back(timeRow);
}

//initialize timerarray

for (int id = 0; id < AoS; id++){
	const Setting &sensor = sensors[id];
	int interval;
	sensor.lookupValue("interval", interval); 
	timerArray[id][0] = (long long) interval;
	timerArray[id][1] = (getTime() - timerArray[id][0] - (rand() %100));
}

for (int i = 0; i < AoS; i++){
	for (int j = 0; j < 2; j++){
		cout << timerArray[i][j] << " ";
	}
	cout << endl; 
}
cout << endl;

//statearray setup end

//busArray setup start (mainly for modbus and i2c)
//create busArray (slaveAddr, holdReg)

//std::vector <std::vector <int> > busArray;

for (int i = 0; i < AoS; i++){
	std::vector <int> busRow;
	for (int j = 0; j < 4; j++){
		busRow.push_back(i * j);
	}
	busArray.push_back(busRow);
}
//initialize busArray

for (int i = 0; i < AoS; i++){
	const Setting& sensor = sensors[i];
	sensor.lookupValue("deviceNumber", busArray[i][0]);
	sensor.lookupValue("dataLocation", busArray[i][1]);
	std::string nw = "";
	sensor.lookupValue("network", nw);
	if (nw == "modbusrtu" || nw == "modbusRTU" || nw == "ModbusRTU"){
		busArray[i][2] = 0;
	}
	else if (nw == "I2C" || nw == "i2c"){
		busArray[i][2] = 1;
	}
	else if (nw == "modbustcp" || nw == "modbusTCP" || nw == "ModbusTCP"){
		busArray[i][2] = 2;
	}
	else if (nw == "mqtt" || nw == "MQTT" || nw == "Mqtt"){
		busArray[i][2] = 3;
	}

	sensor.lookupValue("messageFormat", busArray[i][3]);
}

for (int i = 0; i < AoS; i++){
	for (int j = 0; j < 4 ;j++){
		cout << busArray[i][j] << " ";
	}
	cout << endl;
}
cout << endl;
//busArray setup end

//attrArray setup start
//create attrArray (name, path, type, network, server, freeComment)

//std::vector <std::vector <std::string> > attrArray;

for (int i = 0; i < AoS; i++){
	std::vector <std::string> attrRow;
	for (int j = 0; j < 7; j++){
		attrRow.push_back("i");
	}
	attrArray.push_back(attrRow);
}
//initialize attrArray

for (int id = 0; id < AoS; id++){
	const Setting &sensor = sensors[id];
	sensor.lookupValue("name", attrArray[id][0]);
	sensor.lookupValue("path", attrArray[id][1]);
	sensor.lookupValue("type", attrArray[id][2]);
	sensor.lookupValue("network", attrArray[id][3]);
	sensor.lookupValue("devicename", attrArray[id][4]);
	sensor.lookupValue("server", attrArray[id][5]);
	sensor.lookupValue("freeComment", attrArray[id][6]);
}

for (int i = 0; i < AoS; i++){
	for (int j = 0; j < 6; j++){
		cout << attrArray[i][j] << " ";
	}
	cout << endl;
}
cout << endl;

//attrArray -setup end

//modArray -setup start
//create modArray (modifier)

//std::vector <std::vector <float> > modArray;


for (int i = 0; i < AoS; i++){
	std::vector <float> modRow;
	for (int j = 0; j < 1; j++){
		modRow.push_back(i * j);
	}
	modArray.push_back(modRow);
}
//initialize modArray

for (int id = 0; id < AoS; id++){
	const Setting &sensor = sensors[id];
	sensor.lookupValue("modifier", modArray[id][0]);
	cout << modArray[id][0] << " ";
}
cout << endl;

cout << "Setting up Wapice-cloud " << endl;

wapiceDeviceSpec();

cout << "Initializing MQTT threads" << endl;

std::thread mqttsender_thread(mqttsender);

std::thread mqttlistener_thread(mqttlistener);

//std::thread sendhandler_thread(sendhandlerthread);


sleep(1);
cout << "Done did done!" << endl;

//modArray -setup end
//main -setup end

while (true){
	stateCheck();
}
}
